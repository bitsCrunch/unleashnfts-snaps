{"version":3,"file":"component---src-pages-index-tsx-f5be901bc7373bb69d41.js","mappings":"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","sources":["webpack://site/./src/pages/index.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nimport {\n  ConnectButton,\n  InstallFlaskButton,\n  ReconnectButton,\n  SendHelloButton,\n  Card,\n  // SendTestTransactionButton,\n} from '../components';\nimport { defaultSnapOrigin } from '../config';\nimport {\n  useMetaMask,\n  useInvokeSnap,\n  useMetaMaskContext,\n  useRequestSnap,\n} from '../hooks';\nimport { isLocalSnap, shouldDisplayReconnectButton } from '../utils';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex: 1;\n  margin-top: 7.6rem;\n  margin-bottom: 7.6rem;\n  ${({ theme }) => theme.mediaQueries.small} {\n    padding-left: 2.4rem;\n    padding-right: 2.4rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    width: auto;\n  }\n`;\n\nconst Heading = styled.h1`\n  margin-top: 0;\n  margin-bottom: 2.4rem;\n  text-align: center;\n`;\n\nconst Span = styled.span`\n  color: ${(props) => props.theme.colors.primary?.default};\n`;\n\nconst Subtitle = styled.p`\n  font-size: ${({ theme }) => theme.fontSizes.large};\n  font-weight: 500;\n  margin-top: 0;\n  margin-bottom: 0;\n  ${({ theme }) => theme.mediaQueries.small} {\n    font-size: ${({ theme }) => theme.fontSizes.text};\n  }\n`;\n\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  max-width: 64.8rem;\n  width: 100%;\n  height: 100%;\n  margin-top: 1.5rem;\n`;\n\nconst Notice = styled.div`\n  background-color: ${({ theme }) => theme.colors.background?.alternative};\n  border: 1px solid ${({ theme }) => theme.colors.border?.default};\n  color: ${({ theme }) => theme.colors.text?.alternative};\n  border-radius: ${({ theme }) => theme.radii.default};\n  padding: 2.4rem;\n  margin-top: 2.4rem;\n  max-width: 60rem;\n  width: 100%;\n\n  & > * {\n    margin: 0;\n  }\n  ${({ theme }) => theme.mediaQueries.small} {\n    margin-top: 1.2rem;\n    padding: 1.6rem;\n  }\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: ${({ theme }) => theme.colors.error?.muted};\n  border: 1px solid ${({ theme }) => theme.colors.error?.default};\n  color: ${({ theme }) => theme.colors.error?.alternative};\n  border-radius: ${({ theme }) => theme.radii.default};\n  padding: 2.4rem;\n  margin-bottom: 2.4rem;\n  margin-top: 2.4rem;\n  max-width: 60rem;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.small} {\n    padding: 1.6rem;\n    margin-bottom: 1.2rem;\n    margin-top: 1.2rem;\n    max-width: 100%;\n  }\n`;\n\nconst Index = () => {\n  const { error } = useMetaMaskContext();\n  const { isFlask, snapsDetected, installedSnap } = useMetaMask();\n  const requestSnap = useRequestSnap();\n  const invokeSnap = useInvokeSnap();\n\n  const isMetaMaskReady = isLocalSnap(defaultSnapOrigin)\n    ? isFlask\n    : snapsDetected;\n\n  const handleSendHelloClick = async () => {\n    await invokeSnap({ method: 'hello' });\n  };\n\n  return (\n    <Container>\n      <Heading>\n        <Span>UnleashNFTs Snap</Span>\n      </Heading>\n      <Subtitle>\n        by <code>bitsCrunch</code>\n      </Subtitle>\n      <CardContainer>\n        {error && (\n          <ErrorMessage>\n            <b>An error happened:</b> {error.message}\n          </ErrorMessage>\n        )}\n        {!isMetaMaskReady && (\n          <Card\n            content={{\n              title: 'Install',\n              description:\n                'Click on the button below to install the snap so that you can have more insights for each transaction.',\n              button: <InstallFlaskButton />,\n            }}\n            fullWidth\n          />\n        )}\n        {!installedSnap && (\n          <Card\n            content={{\n              title: 'Connect',\n              description:\n                'Get started by connecting to and installing the UnleashNFTs snap.',\n              button: (\n                <ConnectButton\n                  onClick={requestSnap}\n                  disabled={!isMetaMaskReady}\n                />\n              ),\n            }}\n            disabled={!isMetaMaskReady}\n          />\n        )}\n        {shouldDisplayReconnectButton(installedSnap) && (\n          <Card\n            content={{\n              title: 'Reconnect',\n              description:\n                'While connected to a local running snap this button will always be displayed in order to update the snap if a change is made.',\n              button: (\n                <ReconnectButton\n                  onClick={requestSnap}\n                  disabled={!installedSnap}\n                />\n              ),\n            }}\n            disabled={!installedSnap}\n          />\n        )}\n        <Card\n          content={{\n            title: 'Send Hello message',\n            description:\n              'Display a custom message within a confirmation screen in MetaMask.',\n            button: (\n              <SendHelloButton\n                onClick={handleSendHelloClick}\n                disabled={!installedSnap}\n              />\n            ),\n          }}\n          disabled={!installedSnap}\n          fullWidth={\n            isMetaMaskReady &&\n            Boolean(installedSnap) &&\n            !shouldDisplayReconnectButton(installedSnap)\n          }\n        />\n        <Notice>\n          <p>\n            Please note that the <b>snap.manifest.json</b> and{' '}\n            <b>package.json</b> must be located in the server root directory and\n            the bundle must be hosted at the location specified by the location\n            field.\n          </p>\n        </Notice>\n      </CardContainer>\n    </Container>\n  );\n};\n\nexport default Index;\n"],"names":["Container","styled","div","withConfig","displayName","componentId","_ref","theme","mediaQueries","small","Heading","h1","Span","span","props","_props$theme$colors$p","colors","primary","default","Subtitle","p","_ref2","fontSizes","large","_ref3","_ref4","text","CardContainer","Notice","_ref5","_theme$colors$backgro","background","alternative","_ref6","_theme$colors$border","border","_ref7","_theme$colors$text","_ref8","radii","_ref9","ErrorMessage","_ref10","_theme$colors$error","error","muted","_ref11","_theme$colors$error2","_ref12","_theme$colors$error3","_ref13","_ref14","Index","useMetaMaskContext","isFlask","snapsDetected","installedSnap","useMetaMask","requestSnap","useRequestSnap","invokeSnap","useInvokeSnap","isMetaMaskReady","isLocalSnap","defaultSnapOrigin","_jsxs","children","_jsx","message","Card","content","title","description","button","InstallFlaskButton","fullWidth","ConnectButton","onClick","disabled","shouldDisplayReconnectButton","ReconnectButton","SendHelloButton","async","method","Boolean"],"sourceRoot":""}